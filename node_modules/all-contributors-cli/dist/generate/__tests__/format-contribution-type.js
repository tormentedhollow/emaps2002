"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _formatContributionType = _interopRequireDefault(require("../format-contribution-type"));

var _contributors = _interopRequireDefault(require("./fixtures/contributors.json"));

var fixtures = function () {
  return {
    options: {
      projectOwner: 'all-contributors',
      projectName: 'all-contributors-cli',
      repoType: 'github',
      repoHost: 'https://github.com',
      imageSize: 100
    }
  };
};

test('return corresponding symbol', function () {
  var contributor = _contributors.default.kentcdodds;

  var _fixtures = fixtures(),
      options = _fixtures.options;

  expect((0, _formatContributionType.default)(options, contributor, 'tool')).toBe('[üîß](#tool-kentcdodds "Tools")');
  expect((0, _formatContributionType.default)(options, contributor, 'question')).toBe('[üí¨](#question-kentcdodds "Answering Questions")');
});
test('return link to commits', function () {
  var contributor = _contributors.default.kentcdodds;

  var _fixtures2 = fixtures(),
      options = _fixtures2.options;

  var expectedLink = 'https://github.com/all-contributors/all-contributors-cli/commits?author=kentcdodds';
  expect((0, _formatContributionType.default)(options, contributor, 'code')).toBe(`[üíª](${expectedLink} "Code")`);
  expect((0, _formatContributionType.default)(options, contributor, 'doc')).toBe(`[üìñ](${expectedLink} "Documentation")`);
  expect((0, _formatContributionType.default)(options, contributor, 'test')).toBe(`[‚ö†Ô∏è](${expectedLink} "Tests")`);
});
test('return link to issues', function () {
  var contributor = _contributors.default.kentcdodds;

  var _fixtures3 = fixtures(),
      options = _fixtures3.options;

  expect((0, _formatContributionType.default)(options, contributor, 'bug')).toBe('[üêõ](https://github.com/all-contributors/all-contributors-cli/issues?q=author%3Akentcdodds "Bug reports")');
});
test('make any symbol into a link if contribution is an object', function () {
  var contributor = _contributors.default.kentcdodds;

  var _fixtures4 = fixtures(),
      options = _fixtures4.options;

  expect((0, _formatContributionType.default)(options, contributor, {
    type: 'tool',
    url: 'www.foo.bar'
  })).toBe('[üîß](www.foo.bar "Tools")');
});
test('override url for given types', function () {
  var contributor = _contributors.default.kentcdodds;

  var _fixtures5 = fixtures(),
      options = _fixtures5.options;

  expect((0, _formatContributionType.default)(options, contributor, {
    type: 'code',
    url: 'www.foo.bar'
  })).toBe('[üíª](www.foo.bar "Code")');
});
test('be able to add types to the symbol list', function () {
  var contributor = _contributors.default.kentcdodds;

  var _fixtures6 = fixtures(),
      options = _fixtures6.options;

  options.types = {
    cheerful: {
      symbol: ':smiley:'
    }
  };
  expect((0, _formatContributionType.default)(options, contributor, 'cheerful')).toBe('[:smiley:](#cheerful-kentcdodds "")');
  expect((0, _formatContributionType.default)(options, contributor, {
    type: 'cheerful',
    url: 'www.foo.bar'
  })).toBe('[:smiley:](www.foo.bar "")');
});
test('be able to add types with template to the symbol list', function () {
  var contributor = _contributors.default.kentcdodds;

  var _fixtures7 = fixtures(),
      options = _fixtures7.options;

  options.types = {
    web: {
      symbol: ':web:',
      link: 'www.<%= contributor.login %>.com'
    }
  };
  expect((0, _formatContributionType.default)(options, contributor, 'web')).toBe('[:web:](www.kentcdodds.com "")');
});
test('be able to override existing types', function () {
  var contributor = _contributors.default.kentcdodds;

  var _fixtures8 = fixtures(),
      options = _fixtures8.options;

  options.types = {
    code: {
      symbol: ':smiley:'
    }
  };
  expect((0, _formatContributionType.default)(options, contributor, 'code')).toBe('[:smiley:](#code-kentcdodds "")');
  expect((0, _formatContributionType.default)(options, contributor, {
    type: 'code',
    url: 'www.foo.bar'
  })).toBe('[:smiley:](www.foo.bar "")');
});
test('be able to override existing templates', function () {
  var contributor = _contributors.default.kentcdodds;

  var _fixtures9 = fixtures(),
      options = _fixtures9.options;

  options.types = {
    code: {
      symbol: ':web:',
      link: 'www.<%= contributor.login %>.com'
    }
  };
  expect((0, _formatContributionType.default)(options, contributor, 'code')).toBe('[:web:](www.kentcdodds.com "")');
  expect((0, _formatContributionType.default)(options, contributor, {
    type: 'code',
    url: 'www.foo.bar'
  })).toBe('[:web:](www.foo.bar "")');
});
test('throw a helpful error on unknown type', function () {
  var contributor = _contributors.default.kentcdodds;

  var _fixtures10 = fixtures(),
      options = _fixtures10.options;

  expect(function () {
    return (0, _formatContributionType.default)(options, contributor, 'docs');
  }).toThrowError('Unknown contribution type docs for contributor kentcdodds');
});
test('throw a helpful error on unknown type and no login', function () {
  var contributor = _contributors.default.nologin_badrole;

  var _fixtures11 = fixtures(),
      options = _fixtures11.options;

  expect(function () {
    return (0, _formatContributionType.default)(options, contributor, 'docs');
  }).toThrowError('Unknown contribution type docs for contributor Wildly Misconfigured');
});