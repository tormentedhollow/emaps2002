/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
/** @type {?} */
const LOG_PREFIX = '@angular-extensions/elements';
export class LazyElementsLoaderService {
    constructor() {
        this.registry = new Map();
    }
    /**
     * @param {?} url
     * @param {?} tag
     * @param {?=} isModule
     * @return {?}
     */
    loadElement(url, tag, isModule = false) {
        if (!url) {
            throw new Error(`${LOG_PREFIX} - url for <${tag}> not found`);
        }
        if (!tag) {
            throw new Error(`${LOG_PREFIX} - tag for '${url}' not found, the *axLazyElement has to be used on HTML element`);
        }
        if (!this.hasElement(url)) {
            /** @type {?} */
            const notifier = this.addElement(url);
            /** @type {?} */
            const script = (/** @type {?} */ (document.createElement('script')));
            if (isModule) {
                script.type = 'module';
            }
            script.src = url;
            script.onload = notifier.resolve;
            script.onerror = notifier.reject;
            document.body.appendChild(script);
        }
        return this.registry.get(this.stripUrlProtocol(url));
    }
    /**
     * @private
     * @param {?} url
     * @return {?}
     */
    addElement(url) {
        /** @type {?} */
        let notifier;
        this.registry.set(this.stripUrlProtocol(url), new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        (resolve, reject) => (notifier = { resolve, reject }))));
        return notifier;
    }
    /**
     * @private
     * @param {?} url
     * @return {?}
     */
    hasElement(url) {
        return this.registry.has(this.stripUrlProtocol(url));
    }
    /**
     * @private
     * @param {?} url
     * @return {?}
     */
    stripUrlProtocol(url) {
        return url.replace(/https?:\/\//, '');
    }
}
LazyElementsLoaderService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
LazyElementsLoaderService.ctorParameters = () => [];
/** @nocollapse */ LazyElementsLoaderService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function LazyElementsLoaderService_Factory() { return new LazyElementsLoaderService(); }, token: LazyElementsLoaderService, providedIn: "root" });
if (false) {
    /** @type {?} */
    LazyElementsLoaderService.prototype.registry;
}
/**
 * @record
 */
function Notifier() { }
if (false) {
    /** @type {?} */
    Notifier.prototype.resolve;
    /** @type {?} */
    Notifier.prototype.reject;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGF6eS1lbGVtZW50cy1sb2FkZXIuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bhbmd1bGFyLWV4dGVuc2lvbnMvZWxlbWVudHMvIiwic291cmNlcyI6WyJsaWIvbGF6eS1lbGVtZW50cy9sYXp5LWVsZW1lbnRzLWxvYWRlci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDOzs7TUFFckMsVUFBVSxHQUFHLDhCQUE4QjtBQUtqRCxNQUFNLE9BQU8seUJBQXlCO0lBR3BDO1FBRkEsYUFBUSxHQUErQixJQUFJLEdBQUcsRUFBeUIsQ0FBQztJQUV6RCxDQUFDOzs7Ozs7O0lBRWhCLFdBQVcsQ0FDVCxHQUFXLEVBQ1gsR0FBVyxFQUNYLFdBQW9CLEtBQUs7UUFFekIsSUFBSSxDQUFDLEdBQUcsRUFBRTtZQUNSLE1BQU0sSUFBSSxLQUFLLENBQUMsR0FBRyxVQUFVLGVBQWUsR0FBRyxhQUFhLENBQUMsQ0FBQztTQUMvRDtRQUVELElBQUksQ0FBQyxHQUFHLEVBQUU7WUFDUixNQUFNLElBQUksS0FBSyxDQUNiLEdBQUcsVUFBVSxlQUFlLEdBQUcsZ0VBQWdFLENBQ2hHLENBQUM7U0FDSDtRQUVELElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxFQUFFOztrQkFDbkIsUUFBUSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDOztrQkFDL0IsTUFBTSxHQUFHLG1CQUFBLFFBQVEsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLEVBQXFCO1lBQ3BFLElBQUksUUFBUSxFQUFFO2dCQUNaLE1BQU0sQ0FBQyxJQUFJLEdBQUcsUUFBUSxDQUFDO2FBQ3hCO1lBQ0QsTUFBTSxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUM7WUFDakIsTUFBTSxDQUFDLE1BQU0sR0FBRyxRQUFRLENBQUMsT0FBTyxDQUFDO1lBQ2pDLE1BQU0sQ0FBQyxPQUFPLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBQztZQUNqQyxRQUFRLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUNuQztRQUVELE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDdkQsQ0FBQzs7Ozs7O0lBRU8sVUFBVSxDQUFDLEdBQVc7O1lBQ3hCLFFBQWtCO1FBQ3RCLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUNmLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsRUFDMUIsSUFBSSxPQUFPOzs7OztRQUFPLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxFQUFFLENBQUMsQ0FBQyxRQUFRLEdBQUcsRUFBRSxPQUFPLEVBQUUsTUFBTSxFQUFFLENBQUMsRUFBQyxDQUN6RSxDQUFDO1FBQ0YsT0FBTyxRQUFRLENBQUM7SUFDbEIsQ0FBQzs7Ozs7O0lBRU8sVUFBVSxDQUFDLEdBQVc7UUFDNUIsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUN2RCxDQUFDOzs7Ozs7SUFFTyxnQkFBZ0IsQ0FBQyxHQUFXO1FBQ2xDLE9BQU8sR0FBRyxDQUFDLE9BQU8sQ0FBQyxhQUFhLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDeEMsQ0FBQzs7O1lBckRGLFVBQVUsU0FBQztnQkFDVixVQUFVLEVBQUUsTUFBTTthQUNuQjs7Ozs7OztJQUVDLDZDQUF3RTs7Ozs7QUFvRDFFLHVCQUdDOzs7SUFGQywyQkFBb0I7O0lBQ3BCLDBCQUE2QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuY29uc3QgTE9HX1BSRUZJWCA9ICdAYW5ndWxhci1leHRlbnNpb25zL2VsZW1lbnRzJztcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgTGF6eUVsZW1lbnRzTG9hZGVyU2VydmljZSB7XG4gIHJlZ2lzdHJ5OiBNYXA8c3RyaW5nLCBQcm9taXNlPHZvaWQ+PiA9IG5ldyBNYXA8c3RyaW5nLCBQcm9taXNlPHZvaWQ+PigpO1xuXG4gIGNvbnN0cnVjdG9yKCkge31cblxuICBsb2FkRWxlbWVudChcbiAgICB1cmw6IHN0cmluZyxcbiAgICB0YWc6IHN0cmluZyxcbiAgICBpc01vZHVsZTogYm9vbGVhbiA9IGZhbHNlXG4gICk6IFByb21pc2U8dm9pZD4ge1xuICAgIGlmICghdXJsKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYCR7TE9HX1BSRUZJWH0gLSB1cmwgZm9yIDwke3RhZ30+IG5vdCBmb3VuZGApO1xuICAgIH1cblxuICAgIGlmICghdGFnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIGAke0xPR19QUkVGSVh9IC0gdGFnIGZvciAnJHt1cmx9JyBub3QgZm91bmQsIHRoZSAqYXhMYXp5RWxlbWVudCBoYXMgdG8gYmUgdXNlZCBvbiBIVE1MIGVsZW1lbnRgXG4gICAgICApO1xuICAgIH1cblxuICAgIGlmICghdGhpcy5oYXNFbGVtZW50KHVybCkpIHtcbiAgICAgIGNvbnN0IG5vdGlmaWVyID0gdGhpcy5hZGRFbGVtZW50KHVybCk7XG4gICAgICBjb25zdCBzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKSBhcyBIVE1MU2NyaXB0RWxlbWVudDtcbiAgICAgIGlmIChpc01vZHVsZSkge1xuICAgICAgICBzY3JpcHQudHlwZSA9ICdtb2R1bGUnO1xuICAgICAgfVxuICAgICAgc2NyaXB0LnNyYyA9IHVybDtcbiAgICAgIHNjcmlwdC5vbmxvYWQgPSBub3RpZmllci5yZXNvbHZlO1xuICAgICAgc2NyaXB0Lm9uZXJyb3IgPSBub3RpZmllci5yZWplY3Q7XG4gICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHNjcmlwdCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMucmVnaXN0cnkuZ2V0KHRoaXMuc3RyaXBVcmxQcm90b2NvbCh1cmwpKTtcbiAgfVxuXG4gIHByaXZhdGUgYWRkRWxlbWVudCh1cmw6IHN0cmluZyk6IE5vdGlmaWVyIHtcbiAgICBsZXQgbm90aWZpZXI6IE5vdGlmaWVyO1xuICAgIHRoaXMucmVnaXN0cnkuc2V0KFxuICAgICAgdGhpcy5zdHJpcFVybFByb3RvY29sKHVybCksXG4gICAgICBuZXcgUHJvbWlzZTx2b2lkPigocmVzb2x2ZSwgcmVqZWN0KSA9PiAobm90aWZpZXIgPSB7IHJlc29sdmUsIHJlamVjdCB9KSlcbiAgICApO1xuICAgIHJldHVybiBub3RpZmllcjtcbiAgfVxuXG4gIHByaXZhdGUgaGFzRWxlbWVudCh1cmw6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLnJlZ2lzdHJ5Lmhhcyh0aGlzLnN0cmlwVXJsUHJvdG9jb2wodXJsKSk7XG4gIH1cblxuICBwcml2YXRlIHN0cmlwVXJsUHJvdG9jb2wodXJsOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIHJldHVybiB1cmwucmVwbGFjZSgvaHR0cHM/OlxcL1xcLy8sICcnKTtcbiAgfVxufVxuXG5pbnRlcmZhY2UgTm90aWZpZXIge1xuICByZXNvbHZlOiAoKSA9PiB2b2lkO1xuICByZWplY3Q6IChlcnJvcjogYW55KSA9PiB2b2lkO1xufVxuIl19