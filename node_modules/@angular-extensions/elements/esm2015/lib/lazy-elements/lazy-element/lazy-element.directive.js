/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';
import { LazyElementsLoaderService } from '../lazy-elements-loader.service';
/** @type {?} */
const LOG_PREFIX = '@angular-extensions/elements';
export class LazyElementDirective {
    // tslint:disable-line:no-input-rename
    /**
     * @param {?} vcr
     * @param {?} template
     * @param {?} elementsLoaderService
     */
    constructor(vcr, template, elementsLoaderService) {
        this.vcr = vcr;
        this.template = template;
        this.elementsLoaderService = elementsLoaderService;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        /** @type {?} */
        const elementTag = ((/** @type {?} */ (this.template)))._def.element.template.nodes[0]
            .element.name;
        if (this.loadingTemplateRef) {
            this.vcr.createEmbeddedView(this.loadingTemplateRef);
        }
        this.elementsLoaderService
            .loadElement(this.url, elementTag, this.isModule)
            .then((/**
         * @return {?}
         */
        () => {
            this.vcr.clear();
            this.vcr.createEmbeddedView(this.template);
        }))
            .catch((/**
         * @return {?}
         */
        () => {
            this.vcr.clear();
            if (this.errorTemplateRef) {
                this.vcr.createEmbeddedView(this.errorTemplateRef);
            }
            else {
                console.error(`${LOG_PREFIX} - Loading of element <${elementTag}> failed, please provide <ng-template #error>Loading failed...</ng-template> and reference it in *axLazyElement="errorTemplate: error" to display customized error message in place of element`);
            }
        }));
    }
}
LazyElementDirective.decorators = [
    { type: Directive, args: [{
                selector: '[axLazyElement]'
            },] }
];
/** @nocollapse */
LazyElementDirective.ctorParameters = () => [
    { type: ViewContainerRef },
    { type: TemplateRef },
    { type: LazyElementsLoaderService }
];
LazyElementDirective.propDecorators = {
    url: [{ type: Input, args: ['axLazyElement',] }],
    loadingTemplateRef: [{ type: Input, args: ['axLazyElementLoadingTemplate',] }],
    errorTemplateRef: [{ type: Input, args: ['axLazyElementErrorTemplate',] }],
    isModule: [{ type: Input, args: ['axLazyElementModule',] }]
};
if (false) {
    /** @type {?} */
    LazyElementDirective.prototype.url;
    /** @type {?} */
    LazyElementDirective.prototype.loadingTemplateRef;
    /** @type {?} */
    LazyElementDirective.prototype.errorTemplateRef;
    /** @type {?} */
    LazyElementDirective.prototype.isModule;
    /**
     * @type {?}
     * @private
     */
    LazyElementDirective.prototype.vcr;
    /**
     * @type {?}
     * @private
     */
    LazyElementDirective.prototype.template;
    /**
     * @type {?}
     * @private
     */
    LazyElementDirective.prototype.elementsLoaderService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGF6eS1lbGVtZW50LmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bhbmd1bGFyLWV4dGVuc2lvbnMvZWxlbWVudHMvIiwic291cmNlcyI6WyJsaWIvbGF6eS1lbGVtZW50cy9sYXp5LWVsZW1lbnQvbGF6eS1lbGVtZW50LmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUNMLFNBQVMsRUFDVCxLQUFLLEVBRUwsV0FBVyxFQUNYLGdCQUFnQixFQUNqQixNQUFNLGVBQWUsQ0FBQztBQUV2QixPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQzs7TUFFdEUsVUFBVSxHQUFHLDhCQUE4QjtBQUtqRCxNQUFNLE9BQU8sb0JBQW9COzs7Ozs7O0lBTS9CLFlBQ1UsR0FBcUIsRUFDckIsUUFBMEIsRUFDMUIscUJBQWdEO1FBRmhELFFBQUcsR0FBSCxHQUFHLENBQWtCO1FBQ3JCLGFBQVEsR0FBUixRQUFRLENBQWtCO1FBQzFCLDBCQUFxQixHQUFyQixxQkFBcUIsQ0FBMkI7SUFDdkQsQ0FBQzs7OztJQUVKLFFBQVE7O2NBQ0EsVUFBVSxHQUFHLENBQUMsbUJBQUEsSUFBSSxDQUFDLFFBQVEsRUFBTyxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQzthQUNyRSxPQUFPLENBQUMsSUFBSTtRQUVmLElBQUksSUFBSSxDQUFDLGtCQUFrQixFQUFFO1lBQzNCLElBQUksQ0FBQyxHQUFHLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLENBQUM7U0FDdEQ7UUFFRCxJQUFJLENBQUMscUJBQXFCO2FBQ3ZCLFdBQVcsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLFVBQVUsRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDO2FBQ2hELElBQUk7OztRQUFDLEdBQUcsRUFBRTtZQUNULElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUM7WUFDakIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDN0MsQ0FBQyxFQUFDO2FBQ0QsS0FBSzs7O1FBQUMsR0FBRyxFQUFFO1lBQ1YsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsQ0FBQztZQUNqQixJQUFJLElBQUksQ0FBQyxnQkFBZ0IsRUFBRTtnQkFDekIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQzthQUNwRDtpQkFBTTtnQkFDTCxPQUFPLENBQUMsS0FBSyxDQUNYLEdBQUcsVUFBVSwwQkFBMEIsVUFBVSxnTUFBZ00sQ0FDbFAsQ0FBQzthQUNIO1FBQ0gsQ0FBQyxFQUFDLENBQUM7SUFDUCxDQUFDOzs7WUF2Q0YsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxpQkFBaUI7YUFDNUI7Ozs7WUFUQyxnQkFBZ0I7WUFEaEIsV0FBVztZQUlKLHlCQUF5Qjs7O2tCQVEvQixLQUFLLFNBQUMsZUFBZTtpQ0FDckIsS0FBSyxTQUFDLDhCQUE4QjsrQkFDcEMsS0FBSyxTQUFDLDRCQUE0Qjt1QkFDbEMsS0FBSyxTQUFDLHFCQUFxQjs7OztJQUg1QixtQ0FBb0M7O0lBQ3BDLGtEQUE0RTs7SUFDNUUsZ0RBQXdFOztJQUN4RSx3Q0FBZ0Q7Ozs7O0lBRzlDLG1DQUE2Qjs7Ozs7SUFDN0Isd0NBQWtDOzs7OztJQUNsQyxxREFBd0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBEaXJlY3RpdmUsXG4gIElucHV0LFxuICBPbkluaXQsXG4gIFRlbXBsYXRlUmVmLFxuICBWaWV3Q29udGFpbmVyUmVmXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBMYXp5RWxlbWVudHNMb2FkZXJTZXJ2aWNlIH0gZnJvbSAnLi4vbGF6eS1lbGVtZW50cy1sb2FkZXIuc2VydmljZSc7XG5cbmNvbnN0IExPR19QUkVGSVggPSAnQGFuZ3VsYXItZXh0ZW5zaW9ucy9lbGVtZW50cyc7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1theExhenlFbGVtZW50XSdcbn0pXG5leHBvcnQgY2xhc3MgTGF6eUVsZW1lbnREaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQge1xuICBASW5wdXQoJ2F4TGF6eUVsZW1lbnQnKSB1cmw6IHN0cmluZztcbiAgQElucHV0KCdheExhenlFbGVtZW50TG9hZGluZ1RlbXBsYXRlJykgbG9hZGluZ1RlbXBsYXRlUmVmOiBUZW1wbGF0ZVJlZjxhbnk+OyAvLyB0c2xpbnQ6ZGlzYWJsZS1saW5lOm5vLWlucHV0LXJlbmFtZVxuICBASW5wdXQoJ2F4TGF6eUVsZW1lbnRFcnJvclRlbXBsYXRlJykgZXJyb3JUZW1wbGF0ZVJlZjogVGVtcGxhdGVSZWY8YW55PjsgLy8gdHNsaW50OmRpc2FibGUtbGluZTpuby1pbnB1dC1yZW5hbWVcbiAgQElucHV0KCdheExhenlFbGVtZW50TW9kdWxlJykgaXNNb2R1bGU6IGJvb2xlYW47IC8vIHRzbGludDpkaXNhYmxlLWxpbmU6bm8taW5wdXQtcmVuYW1lXG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSB2Y3I6IFZpZXdDb250YWluZXJSZWYsXG4gICAgcHJpdmF0ZSB0ZW1wbGF0ZTogVGVtcGxhdGVSZWY8YW55PixcbiAgICBwcml2YXRlIGVsZW1lbnRzTG9hZGVyU2VydmljZTogTGF6eUVsZW1lbnRzTG9hZGVyU2VydmljZVxuICApIHt9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgY29uc3QgZWxlbWVudFRhZyA9ICh0aGlzLnRlbXBsYXRlIGFzIGFueSkuX2RlZi5lbGVtZW50LnRlbXBsYXRlLm5vZGVzWzBdXG4gICAgICAuZWxlbWVudC5uYW1lO1xuXG4gICAgaWYgKHRoaXMubG9hZGluZ1RlbXBsYXRlUmVmKSB7XG4gICAgICB0aGlzLnZjci5jcmVhdGVFbWJlZGRlZFZpZXcodGhpcy5sb2FkaW5nVGVtcGxhdGVSZWYpO1xuICAgIH1cblxuICAgIHRoaXMuZWxlbWVudHNMb2FkZXJTZXJ2aWNlXG4gICAgICAubG9hZEVsZW1lbnQodGhpcy51cmwsIGVsZW1lbnRUYWcsIHRoaXMuaXNNb2R1bGUpXG4gICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgIHRoaXMudmNyLmNsZWFyKCk7XG4gICAgICAgIHRoaXMudmNyLmNyZWF0ZUVtYmVkZGVkVmlldyh0aGlzLnRlbXBsYXRlKTtcbiAgICAgIH0pXG4gICAgICAuY2F0Y2goKCkgPT4ge1xuICAgICAgICB0aGlzLnZjci5jbGVhcigpO1xuICAgICAgICBpZiAodGhpcy5lcnJvclRlbXBsYXRlUmVmKSB7XG4gICAgICAgICAgdGhpcy52Y3IuY3JlYXRlRW1iZWRkZWRWaWV3KHRoaXMuZXJyb3JUZW1wbGF0ZVJlZik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihcbiAgICAgICAgICAgIGAke0xPR19QUkVGSVh9IC0gTG9hZGluZyBvZiBlbGVtZW50IDwke2VsZW1lbnRUYWd9PiBmYWlsZWQsIHBsZWFzZSBwcm92aWRlIDxuZy10ZW1wbGF0ZSAjZXJyb3I+TG9hZGluZyBmYWlsZWQuLi48L25nLXRlbXBsYXRlPiBhbmQgcmVmZXJlbmNlIGl0IGluICpheExhenlFbGVtZW50PVwiZXJyb3JUZW1wbGF0ZTogZXJyb3JcIiB0byBkaXNwbGF5IGN1c3RvbWl6ZWQgZXJyb3IgbWVzc2FnZSBpbiBwbGFjZSBvZiBlbGVtZW50YFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICB9XG59XG4iXX0=