import { Injectable, ɵɵdefineInjectable, Directive, ViewContainerRef, TemplateRef, Input, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var LOG_PREFIX = '@angular-extensions/elements';
var LazyElementsLoaderService = /** @class */ (function () {
    function LazyElementsLoaderService() {
        this.registry = new Map();
    }
    /**
     * @param {?} url
     * @param {?} tag
     * @param {?=} isModule
     * @return {?}
     */
    LazyElementsLoaderService.prototype.loadElement = /**
     * @param {?} url
     * @param {?} tag
     * @param {?=} isModule
     * @return {?}
     */
    function (url, tag, isModule) {
        if (isModule === void 0) { isModule = false; }
        if (!url) {
            throw new Error(LOG_PREFIX + " - url for <" + tag + "> not found");
        }
        if (!tag) {
            throw new Error(LOG_PREFIX + " - tag for '" + url + "' not found, the *axLazyElement has to be used on HTML element");
        }
        if (!this.hasElement(url)) {
            /** @type {?} */
            var notifier = this.addElement(url);
            /** @type {?} */
            var script = (/** @type {?} */ (document.createElement('script')));
            if (isModule) {
                script.type = 'module';
            }
            script.src = url;
            script.onload = notifier.resolve;
            script.onerror = notifier.reject;
            document.body.appendChild(script);
        }
        return this.registry.get(this.stripUrlProtocol(url));
    };
    /**
     * @private
     * @param {?} url
     * @return {?}
     */
    LazyElementsLoaderService.prototype.addElement = /**
     * @private
     * @param {?} url
     * @return {?}
     */
    function (url) {
        /** @type {?} */
        var notifier;
        this.registry.set(this.stripUrlProtocol(url), new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        function (resolve, reject) { return (notifier = { resolve: resolve, reject: reject }); })));
        return notifier;
    };
    /**
     * @private
     * @param {?} url
     * @return {?}
     */
    LazyElementsLoaderService.prototype.hasElement = /**
     * @private
     * @param {?} url
     * @return {?}
     */
    function (url) {
        return this.registry.has(this.stripUrlProtocol(url));
    };
    /**
     * @private
     * @param {?} url
     * @return {?}
     */
    LazyElementsLoaderService.prototype.stripUrlProtocol = /**
     * @private
     * @param {?} url
     * @return {?}
     */
    function (url) {
        return url.replace(/https?:\/\//, '');
    };
    LazyElementsLoaderService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    LazyElementsLoaderService.ctorParameters = function () { return []; };
    /** @nocollapse */ LazyElementsLoaderService.ngInjectableDef = ɵɵdefineInjectable({ factory: function LazyElementsLoaderService_Factory() { return new LazyElementsLoaderService(); }, token: LazyElementsLoaderService, providedIn: "root" });
    return LazyElementsLoaderService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var LOG_PREFIX$1 = '@angular-extensions/elements';
var LazyElementDirective = /** @class */ (function () {
    function LazyElementDirective(vcr, template, elementsLoaderService) {
        this.vcr = vcr;
        this.template = template;
        this.elementsLoaderService = elementsLoaderService;
    }
    /**
     * @return {?}
     */
    LazyElementDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var elementTag = ((/** @type {?} */ (this.template)))._def.element.template.nodes[0]
            .element.name;
        if (this.loadingTemplateRef) {
            this.vcr.createEmbeddedView(this.loadingTemplateRef);
        }
        this.elementsLoaderService
            .loadElement(this.url, elementTag, this.isModule)
            .then((/**
         * @return {?}
         */
        function () {
            _this.vcr.clear();
            _this.vcr.createEmbeddedView(_this.template);
        }))
            .catch((/**
         * @return {?}
         */
        function () {
            _this.vcr.clear();
            if (_this.errorTemplateRef) {
                _this.vcr.createEmbeddedView(_this.errorTemplateRef);
            }
            else {
                console.error(LOG_PREFIX$1 + " - Loading of element <" + elementTag + "> failed, please provide <ng-template #error>Loading failed...</ng-template> and reference it in *axLazyElement=\"errorTemplate: error\" to display customized error message in place of element");
            }
        }));
    };
    LazyElementDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[axLazyElement]'
                },] }
    ];
    /** @nocollapse */
    LazyElementDirective.ctorParameters = function () { return [
        { type: ViewContainerRef },
        { type: TemplateRef },
        { type: LazyElementsLoaderService }
    ]; };
    LazyElementDirective.propDecorators = {
        url: [{ type: Input, args: ['axLazyElement',] }],
        loadingTemplateRef: [{ type: Input, args: ['axLazyElementLoadingTemplate',] }],
        errorTemplateRef: [{ type: Input, args: ['axLazyElementErrorTemplate',] }],
        isModule: [{ type: Input, args: ['axLazyElementModule',] }]
    };
    return LazyElementDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var LazyElementsModule = /** @class */ (function () {
    function LazyElementsModule() {
    }
    LazyElementsModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [LazyElementDirective],
                    imports: [CommonModule],
                    exports: [LazyElementDirective]
                },] }
    ];
    return LazyElementsModule;
}());

export { LazyElementsModule, LazyElementDirective as ɵa, LazyElementsLoaderService as ɵb };
//# sourceMappingURL=angular-extensions-elements.js.map
