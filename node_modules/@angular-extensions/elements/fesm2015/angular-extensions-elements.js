import { Injectable, ɵɵdefineInjectable, Directive, ViewContainerRef, TemplateRef, Input, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const LOG_PREFIX = '@angular-extensions/elements';
class LazyElementsLoaderService {
    constructor() {
        this.registry = new Map();
    }
    /**
     * @param {?} url
     * @param {?} tag
     * @param {?=} isModule
     * @return {?}
     */
    loadElement(url, tag, isModule = false) {
        if (!url) {
            throw new Error(`${LOG_PREFIX} - url for <${tag}> not found`);
        }
        if (!tag) {
            throw new Error(`${LOG_PREFIX} - tag for '${url}' not found, the *axLazyElement has to be used on HTML element`);
        }
        if (!this.hasElement(url)) {
            /** @type {?} */
            const notifier = this.addElement(url);
            /** @type {?} */
            const script = (/** @type {?} */ (document.createElement('script')));
            if (isModule) {
                script.type = 'module';
            }
            script.src = url;
            script.onload = notifier.resolve;
            script.onerror = notifier.reject;
            document.body.appendChild(script);
        }
        return this.registry.get(this.stripUrlProtocol(url));
    }
    /**
     * @private
     * @param {?} url
     * @return {?}
     */
    addElement(url) {
        /** @type {?} */
        let notifier;
        this.registry.set(this.stripUrlProtocol(url), new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        (resolve, reject) => (notifier = { resolve, reject }))));
        return notifier;
    }
    /**
     * @private
     * @param {?} url
     * @return {?}
     */
    hasElement(url) {
        return this.registry.has(this.stripUrlProtocol(url));
    }
    /**
     * @private
     * @param {?} url
     * @return {?}
     */
    stripUrlProtocol(url) {
        return url.replace(/https?:\/\//, '');
    }
}
LazyElementsLoaderService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
LazyElementsLoaderService.ctorParameters = () => [];
/** @nocollapse */ LazyElementsLoaderService.ngInjectableDef = ɵɵdefineInjectable({ factory: function LazyElementsLoaderService_Factory() { return new LazyElementsLoaderService(); }, token: LazyElementsLoaderService, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const LOG_PREFIX$1 = '@angular-extensions/elements';
class LazyElementDirective {
    // tslint:disable-line:no-input-rename
    /**
     * @param {?} vcr
     * @param {?} template
     * @param {?} elementsLoaderService
     */
    constructor(vcr, template, elementsLoaderService) {
        this.vcr = vcr;
        this.template = template;
        this.elementsLoaderService = elementsLoaderService;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        /** @type {?} */
        const elementTag = ((/** @type {?} */ (this.template)))._def.element.template.nodes[0]
            .element.name;
        if (this.loadingTemplateRef) {
            this.vcr.createEmbeddedView(this.loadingTemplateRef);
        }
        this.elementsLoaderService
            .loadElement(this.url, elementTag, this.isModule)
            .then((/**
         * @return {?}
         */
        () => {
            this.vcr.clear();
            this.vcr.createEmbeddedView(this.template);
        }))
            .catch((/**
         * @return {?}
         */
        () => {
            this.vcr.clear();
            if (this.errorTemplateRef) {
                this.vcr.createEmbeddedView(this.errorTemplateRef);
            }
            else {
                console.error(`${LOG_PREFIX$1} - Loading of element <${elementTag}> failed, please provide <ng-template #error>Loading failed...</ng-template> and reference it in *axLazyElement="errorTemplate: error" to display customized error message in place of element`);
            }
        }));
    }
}
LazyElementDirective.decorators = [
    { type: Directive, args: [{
                selector: '[axLazyElement]'
            },] }
];
/** @nocollapse */
LazyElementDirective.ctorParameters = () => [
    { type: ViewContainerRef },
    { type: TemplateRef },
    { type: LazyElementsLoaderService }
];
LazyElementDirective.propDecorators = {
    url: [{ type: Input, args: ['axLazyElement',] }],
    loadingTemplateRef: [{ type: Input, args: ['axLazyElementLoadingTemplate',] }],
    errorTemplateRef: [{ type: Input, args: ['axLazyElementErrorTemplate',] }],
    isModule: [{ type: Input, args: ['axLazyElementModule',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class LazyElementsModule {
}
LazyElementsModule.decorators = [
    { type: NgModule, args: [{
                declarations: [LazyElementDirective],
                imports: [CommonModule],
                exports: [LazyElementDirective]
            },] }
];

export { LazyElementsModule, LazyElementDirective as ɵa, LazyElementsLoaderService as ɵb };
//# sourceMappingURL=angular-extensions-elements.js.map
