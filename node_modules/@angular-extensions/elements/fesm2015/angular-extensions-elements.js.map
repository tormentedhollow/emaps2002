{"version":3,"file":"angular-extensions-elements.js","sources":["ng://@angular-extensions/elements/lib/lazy-elements/lazy-elements-loader.service.ts","ng://@angular-extensions/elements/lib/lazy-elements/lazy-element/lazy-element.directive.ts","ng://@angular-extensions/elements/lib/lazy-elements/lazy-elements.module.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\nconst LOG_PREFIX = '@angular-extensions/elements';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LazyElementsLoaderService {\n  registry: Map<string, Promise<void>> = new Map<string, Promise<void>>();\n\n  constructor() {}\n\n  loadElement(\n    url: string,\n    tag: string,\n    isModule: boolean = false\n  ): Promise<void> {\n    if (!url) {\n      throw new Error(`${LOG_PREFIX} - url for <${tag}> not found`);\n    }\n\n    if (!tag) {\n      throw new Error(\n        `${LOG_PREFIX} - tag for '${url}' not found, the *axLazyElement has to be used on HTML element`\n      );\n    }\n\n    if (!this.hasElement(url)) {\n      const notifier = this.addElement(url);\n      const script = document.createElement('script') as HTMLScriptElement;\n      if (isModule) {\n        script.type = 'module';\n      }\n      script.src = url;\n      script.onload = notifier.resolve;\n      script.onerror = notifier.reject;\n      document.body.appendChild(script);\n    }\n\n    return this.registry.get(this.stripUrlProtocol(url));\n  }\n\n  private addElement(url: string): Notifier {\n    let notifier: Notifier;\n    this.registry.set(\n      this.stripUrlProtocol(url),\n      new Promise<void>((resolve, reject) => (notifier = { resolve, reject }))\n    );\n    return notifier;\n  }\n\n  private hasElement(url: string): boolean {\n    return this.registry.has(this.stripUrlProtocol(url));\n  }\n\n  private stripUrlProtocol(url: string): string {\n    return url.replace(/https?:\\/\\//, '');\n  }\n}\n\ninterface Notifier {\n  resolve: () => void;\n  reject: (error: any) => void;\n}\n","import {\n  Directive,\n  Input,\n  OnInit,\n  TemplateRef,\n  ViewContainerRef\n} from '@angular/core';\n\nimport { LazyElementsLoaderService } from '../lazy-elements-loader.service';\n\nconst LOG_PREFIX = '@angular-extensions/elements';\n\n@Directive({\n  selector: '[axLazyElement]'\n})\nexport class LazyElementDirective implements OnInit {\n  @Input('axLazyElement') url: string;\n  @Input('axLazyElementLoadingTemplate') loadingTemplateRef: TemplateRef<any>; // tslint:disable-line:no-input-rename\n  @Input('axLazyElementErrorTemplate') errorTemplateRef: TemplateRef<any>; // tslint:disable-line:no-input-rename\n  @Input('axLazyElementModule') isModule: boolean; // tslint:disable-line:no-input-rename\n\n  constructor(\n    private vcr: ViewContainerRef,\n    private template: TemplateRef<any>,\n    private elementsLoaderService: LazyElementsLoaderService\n  ) {}\n\n  ngOnInit() {\n    const elementTag = (this.template as any)._def.element.template.nodes[0]\n      .element.name;\n\n    if (this.loadingTemplateRef) {\n      this.vcr.createEmbeddedView(this.loadingTemplateRef);\n    }\n\n    this.elementsLoaderService\n      .loadElement(this.url, elementTag, this.isModule)\n      .then(() => {\n        this.vcr.clear();\n        this.vcr.createEmbeddedView(this.template);\n      })\n      .catch(() => {\n        this.vcr.clear();\n        if (this.errorTemplateRef) {\n          this.vcr.createEmbeddedView(this.errorTemplateRef);\n        } else {\n          console.error(\n            `${LOG_PREFIX} - Loading of element <${elementTag}> failed, please provide <ng-template #error>Loading failed...</ng-template> and reference it in *axLazyElement=\"errorTemplate: error\" to display customized error message in place of element`\n          );\n        }\n      });\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { LazyElementDirective } from './lazy-element/lazy-element.directive';\n\n@NgModule({\n  declarations: [LazyElementDirective],\n  imports: [CommonModule],\n  exports: [LazyElementDirective]\n})\nexport class LazyElementsModule {}\n"],"names":["LOG_PREFIX"],"mappings":"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"}