/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';
import { LazyElementsLoaderService } from '../lazy-elements-loader.service';
/** @type {?} */
var LOG_PREFIX = '@angular-extensions/elements';
var LazyElementDirective = /** @class */ (function () {
    function LazyElementDirective(vcr, template, elementsLoaderService) {
        this.vcr = vcr;
        this.template = template;
        this.elementsLoaderService = elementsLoaderService;
    }
    /**
     * @return {?}
     */
    LazyElementDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var elementTag = ((/** @type {?} */ (this.template)))._def.element.template.nodes[0]
            .element.name;
        if (this.loadingTemplateRef) {
            this.vcr.createEmbeddedView(this.loadingTemplateRef);
        }
        this.elementsLoaderService
            .loadElement(this.url, elementTag, this.isModule)
            .then((/**
         * @return {?}
         */
        function () {
            _this.vcr.clear();
            _this.vcr.createEmbeddedView(_this.template);
        }))
            .catch((/**
         * @return {?}
         */
        function () {
            _this.vcr.clear();
            if (_this.errorTemplateRef) {
                _this.vcr.createEmbeddedView(_this.errorTemplateRef);
            }
            else {
                console.error(LOG_PREFIX + " - Loading of element <" + elementTag + "> failed, please provide <ng-template #error>Loading failed...</ng-template> and reference it in *axLazyElement=\"errorTemplate: error\" to display customized error message in place of element");
            }
        }));
    };
    LazyElementDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[axLazyElement]'
                },] }
    ];
    /** @nocollapse */
    LazyElementDirective.ctorParameters = function () { return [
        { type: ViewContainerRef },
        { type: TemplateRef },
        { type: LazyElementsLoaderService }
    ]; };
    LazyElementDirective.propDecorators = {
        url: [{ type: Input, args: ['axLazyElement',] }],
        loadingTemplateRef: [{ type: Input, args: ['axLazyElementLoadingTemplate',] }],
        errorTemplateRef: [{ type: Input, args: ['axLazyElementErrorTemplate',] }],
        isModule: [{ type: Input, args: ['axLazyElementModule',] }]
    };
    return LazyElementDirective;
}());
export { LazyElementDirective };
if (false) {
    /** @type {?} */
    LazyElementDirective.prototype.url;
    /** @type {?} */
    LazyElementDirective.prototype.loadingTemplateRef;
    /** @type {?} */
    LazyElementDirective.prototype.errorTemplateRef;
    /** @type {?} */
    LazyElementDirective.prototype.isModule;
    /**
     * @type {?}
     * @private
     */
    LazyElementDirective.prototype.vcr;
    /**
     * @type {?}
     * @private
     */
    LazyElementDirective.prototype.template;
    /**
     * @type {?}
     * @private
     */
    LazyElementDirective.prototype.elementsLoaderService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGF6eS1lbGVtZW50LmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bhbmd1bGFyLWV4dGVuc2lvbnMvZWxlbWVudHMvIiwic291cmNlcyI6WyJsaWIvbGF6eS1lbGVtZW50cy9sYXp5LWVsZW1lbnQvbGF6eS1lbGVtZW50LmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUNMLFNBQVMsRUFDVCxLQUFLLEVBRUwsV0FBVyxFQUNYLGdCQUFnQixFQUNqQixNQUFNLGVBQWUsQ0FBQztBQUV2QixPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQzs7SUFFdEUsVUFBVSxHQUFHLDhCQUE4QjtBQUVqRDtJQVNFLDhCQUNVLEdBQXFCLEVBQ3JCLFFBQTBCLEVBQzFCLHFCQUFnRDtRQUZoRCxRQUFHLEdBQUgsR0FBRyxDQUFrQjtRQUNyQixhQUFRLEdBQVIsUUFBUSxDQUFrQjtRQUMxQiwwQkFBcUIsR0FBckIscUJBQXFCLENBQTJCO0lBQ3ZELENBQUM7Ozs7SUFFSix1Q0FBUTs7O0lBQVI7UUFBQSxpQkF3QkM7O1lBdkJPLFVBQVUsR0FBRyxDQUFDLG1CQUFBLElBQUksQ0FBQyxRQUFRLEVBQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7YUFDckUsT0FBTyxDQUFDLElBQUk7UUFFZixJQUFJLElBQUksQ0FBQyxrQkFBa0IsRUFBRTtZQUMzQixJQUFJLENBQUMsR0FBRyxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO1NBQ3REO1FBRUQsSUFBSSxDQUFDLHFCQUFxQjthQUN2QixXQUFXLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxVQUFVLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQzthQUNoRCxJQUFJOzs7UUFBQztZQUNKLEtBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUM7WUFDakIsS0FBSSxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsQ0FBQyxLQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDN0MsQ0FBQyxFQUFDO2FBQ0QsS0FBSzs7O1FBQUM7WUFDTCxLQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDO1lBQ2pCLElBQUksS0FBSSxDQUFDLGdCQUFnQixFQUFFO2dCQUN6QixLQUFJLENBQUMsR0FBRyxDQUFDLGtCQUFrQixDQUFDLEtBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO2FBQ3BEO2lCQUFNO2dCQUNMLE9BQU8sQ0FBQyxLQUFLLENBQ1IsVUFBVSwrQkFBMEIsVUFBVSxxTUFBZ00sQ0FDbFAsQ0FBQzthQUNIO1FBQ0gsQ0FBQyxFQUFDLENBQUM7SUFDUCxDQUFDOztnQkF2Q0YsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSxpQkFBaUI7aUJBQzVCOzs7O2dCQVRDLGdCQUFnQjtnQkFEaEIsV0FBVztnQkFJSix5QkFBeUI7OztzQkFRL0IsS0FBSyxTQUFDLGVBQWU7cUNBQ3JCLEtBQUssU0FBQyw4QkFBOEI7bUNBQ3BDLEtBQUssU0FBQyw0QkFBNEI7MkJBQ2xDLEtBQUssU0FBQyxxQkFBcUI7O0lBaUM5QiwyQkFBQztDQUFBLEFBeENELElBd0NDO1NBckNZLG9CQUFvQjs7O0lBQy9CLG1DQUFvQzs7SUFDcEMsa0RBQTRFOztJQUM1RSxnREFBd0U7O0lBQ3hFLHdDQUFnRDs7Ozs7SUFHOUMsbUNBQTZCOzs7OztJQUM3Qix3Q0FBa0M7Ozs7O0lBQ2xDLHFEQUF3RCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIERpcmVjdGl2ZSxcbiAgSW5wdXQsXG4gIE9uSW5pdCxcbiAgVGVtcGxhdGVSZWYsXG4gIFZpZXdDb250YWluZXJSZWZcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IExhenlFbGVtZW50c0xvYWRlclNlcnZpY2UgfSBmcm9tICcuLi9sYXp5LWVsZW1lbnRzLWxvYWRlci5zZXJ2aWNlJztcblxuY29uc3QgTE9HX1BSRUZJWCA9ICdAYW5ndWxhci1leHRlbnNpb25zL2VsZW1lbnRzJztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW2F4TGF6eUVsZW1lbnRdJ1xufSlcbmV4cG9ydCBjbGFzcyBMYXp5RWxlbWVudERpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gIEBJbnB1dCgnYXhMYXp5RWxlbWVudCcpIHVybDogc3RyaW5nO1xuICBASW5wdXQoJ2F4TGF6eUVsZW1lbnRMb2FkaW5nVGVtcGxhdGUnKSBsb2FkaW5nVGVtcGxhdGVSZWY6IFRlbXBsYXRlUmVmPGFueT47IC8vIHRzbGludDpkaXNhYmxlLWxpbmU6bm8taW5wdXQtcmVuYW1lXG4gIEBJbnB1dCgnYXhMYXp5RWxlbWVudEVycm9yVGVtcGxhdGUnKSBlcnJvclRlbXBsYXRlUmVmOiBUZW1wbGF0ZVJlZjxhbnk+OyAvLyB0c2xpbnQ6ZGlzYWJsZS1saW5lOm5vLWlucHV0LXJlbmFtZVxuICBASW5wdXQoJ2F4TGF6eUVsZW1lbnRNb2R1bGUnKSBpc01vZHVsZTogYm9vbGVhbjsgLy8gdHNsaW50OmRpc2FibGUtbGluZTpuby1pbnB1dC1yZW5hbWVcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHZjcjogVmlld0NvbnRhaW5lclJlZixcbiAgICBwcml2YXRlIHRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxhbnk+LFxuICAgIHByaXZhdGUgZWxlbWVudHNMb2FkZXJTZXJ2aWNlOiBMYXp5RWxlbWVudHNMb2FkZXJTZXJ2aWNlXG4gICkge31cblxuICBuZ09uSW5pdCgpIHtcbiAgICBjb25zdCBlbGVtZW50VGFnID0gKHRoaXMudGVtcGxhdGUgYXMgYW55KS5fZGVmLmVsZW1lbnQudGVtcGxhdGUubm9kZXNbMF1cbiAgICAgIC5lbGVtZW50Lm5hbWU7XG5cbiAgICBpZiAodGhpcy5sb2FkaW5nVGVtcGxhdGVSZWYpIHtcbiAgICAgIHRoaXMudmNyLmNyZWF0ZUVtYmVkZGVkVmlldyh0aGlzLmxvYWRpbmdUZW1wbGF0ZVJlZik7XG4gICAgfVxuXG4gICAgdGhpcy5lbGVtZW50c0xvYWRlclNlcnZpY2VcbiAgICAgIC5sb2FkRWxlbWVudCh0aGlzLnVybCwgZWxlbWVudFRhZywgdGhpcy5pc01vZHVsZSlcbiAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgdGhpcy52Y3IuY2xlYXIoKTtcbiAgICAgICAgdGhpcy52Y3IuY3JlYXRlRW1iZWRkZWRWaWV3KHRoaXMudGVtcGxhdGUpO1xuICAgICAgfSlcbiAgICAgIC5jYXRjaCgoKSA9PiB7XG4gICAgICAgIHRoaXMudmNyLmNsZWFyKCk7XG4gICAgICAgIGlmICh0aGlzLmVycm9yVGVtcGxhdGVSZWYpIHtcbiAgICAgICAgICB0aGlzLnZjci5jcmVhdGVFbWJlZGRlZFZpZXcodGhpcy5lcnJvclRlbXBsYXRlUmVmKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKFxuICAgICAgICAgICAgYCR7TE9HX1BSRUZJWH0gLSBMb2FkaW5nIG9mIGVsZW1lbnQgPCR7ZWxlbWVudFRhZ30+IGZhaWxlZCwgcGxlYXNlIHByb3ZpZGUgPG5nLXRlbXBsYXRlICNlcnJvcj5Mb2FkaW5nIGZhaWxlZC4uLjwvbmctdGVtcGxhdGU+IGFuZCByZWZlcmVuY2UgaXQgaW4gKmF4TGF6eUVsZW1lbnQ9XCJlcnJvclRlbXBsYXRlOiBlcnJvclwiIHRvIGRpc3BsYXkgY3VzdG9taXplZCBlcnJvciBtZXNzYWdlIGluIHBsYWNlIG9mIGVsZW1lbnRgXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gIH1cbn1cbiJdfQ==