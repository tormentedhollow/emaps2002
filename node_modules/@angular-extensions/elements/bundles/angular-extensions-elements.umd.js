(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('@angular-extensions/elements', ['exports', '@angular/core', '@angular/common'], factory) :
    (global = global || self, factory((global['angular-extensions'] = global['angular-extensions'] || {}, global['angular-extensions'].elements = {}), global.ng.core, global.ng.common));
}(this, function (exports, core, common) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var LOG_PREFIX = '@angular-extensions/elements';
    var LazyElementsLoaderService = /** @class */ (function () {
        function LazyElementsLoaderService() {
            this.registry = new Map();
        }
        /**
         * @param {?} url
         * @param {?} tag
         * @param {?=} isModule
         * @return {?}
         */
        LazyElementsLoaderService.prototype.loadElement = /**
         * @param {?} url
         * @param {?} tag
         * @param {?=} isModule
         * @return {?}
         */
        function (url, tag, isModule) {
            if (isModule === void 0) { isModule = false; }
            if (!url) {
                throw new Error(LOG_PREFIX + " - url for <" + tag + "> not found");
            }
            if (!tag) {
                throw new Error(LOG_PREFIX + " - tag for '" + url + "' not found, the *axLazyElement has to be used on HTML element");
            }
            if (!this.hasElement(url)) {
                /** @type {?} */
                var notifier = this.addElement(url);
                /** @type {?} */
                var script = (/** @type {?} */ (document.createElement('script')));
                if (isModule) {
                    script.type = 'module';
                }
                script.src = url;
                script.onload = notifier.resolve;
                script.onerror = notifier.reject;
                document.body.appendChild(script);
            }
            return this.registry.get(this.stripUrlProtocol(url));
        };
        /**
         * @private
         * @param {?} url
         * @return {?}
         */
        LazyElementsLoaderService.prototype.addElement = /**
         * @private
         * @param {?} url
         * @return {?}
         */
        function (url) {
            /** @type {?} */
            var notifier;
            this.registry.set(this.stripUrlProtocol(url), new Promise((/**
             * @param {?} resolve
             * @param {?} reject
             * @return {?}
             */
            function (resolve, reject) { return (notifier = { resolve: resolve, reject: reject }); })));
            return notifier;
        };
        /**
         * @private
         * @param {?} url
         * @return {?}
         */
        LazyElementsLoaderService.prototype.hasElement = /**
         * @private
         * @param {?} url
         * @return {?}
         */
        function (url) {
            return this.registry.has(this.stripUrlProtocol(url));
        };
        /**
         * @private
         * @param {?} url
         * @return {?}
         */
        LazyElementsLoaderService.prototype.stripUrlProtocol = /**
         * @private
         * @param {?} url
         * @return {?}
         */
        function (url) {
            return url.replace(/https?:\/\//, '');
        };
        LazyElementsLoaderService.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        LazyElementsLoaderService.ctorParameters = function () { return []; };
        /** @nocollapse */ LazyElementsLoaderService.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function LazyElementsLoaderService_Factory() { return new LazyElementsLoaderService(); }, token: LazyElementsLoaderService, providedIn: "root" });
        return LazyElementsLoaderService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var LOG_PREFIX$1 = '@angular-extensions/elements';
    var LazyElementDirective = /** @class */ (function () {
        function LazyElementDirective(vcr, template, elementsLoaderService) {
            this.vcr = vcr;
            this.template = template;
            this.elementsLoaderService = elementsLoaderService;
        }
        /**
         * @return {?}
         */
        LazyElementDirective.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            var _this = this;
            /** @type {?} */
            var elementTag = ((/** @type {?} */ (this.template)))._def.element.template.nodes[0]
                .element.name;
            if (this.loadingTemplateRef) {
                this.vcr.createEmbeddedView(this.loadingTemplateRef);
            }
            this.elementsLoaderService
                .loadElement(this.url, elementTag, this.isModule)
                .then((/**
             * @return {?}
             */
            function () {
                _this.vcr.clear();
                _this.vcr.createEmbeddedView(_this.template);
            }))
                .catch((/**
             * @return {?}
             */
            function () {
                _this.vcr.clear();
                if (_this.errorTemplateRef) {
                    _this.vcr.createEmbeddedView(_this.errorTemplateRef);
                }
                else {
                    console.error(LOG_PREFIX$1 + " - Loading of element <" + elementTag + "> failed, please provide <ng-template #error>Loading failed...</ng-template> and reference it in *axLazyElement=\"errorTemplate: error\" to display customized error message in place of element");
                }
            }));
        };
        LazyElementDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[axLazyElement]'
                    },] }
        ];
        /** @nocollapse */
        LazyElementDirective.ctorParameters = function () { return [
            { type: core.ViewContainerRef },
            { type: core.TemplateRef },
            { type: LazyElementsLoaderService }
        ]; };
        LazyElementDirective.propDecorators = {
            url: [{ type: core.Input, args: ['axLazyElement',] }],
            loadingTemplateRef: [{ type: core.Input, args: ['axLazyElementLoadingTemplate',] }],
            errorTemplateRef: [{ type: core.Input, args: ['axLazyElementErrorTemplate',] }],
            isModule: [{ type: core.Input, args: ['axLazyElementModule',] }]
        };
        return LazyElementDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var LazyElementsModule = /** @class */ (function () {
        function LazyElementsModule() {
        }
        LazyElementsModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [LazyElementDirective],
                        imports: [common.CommonModule],
                        exports: [LazyElementDirective]
                    },] }
        ];
        return LazyElementsModule;
    }());

    exports.LazyElementsModule = LazyElementsModule;
    exports.ɵa = LazyElementDirective;
    exports.ɵb = LazyElementsLoaderService;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=angular-extensions-elements.umd.js.map
