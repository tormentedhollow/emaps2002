{"version":3,"sources":["ng://@angular-extensions/elements/lib/lazy-elements/lazy-elements-loader.service.ts","ng://@angular-extensions/elements/lib/lazy-elements/lazy-element/lazy-element.directive.ts","ng://@angular-extensions/elements/lib/lazy-elements/lazy-elements.module.ts"],"names":["LazyElementsLoaderService","this","registry","Map","prototype","loadElement","url","tag","isModule","Error","LOG_PREFIX","hasElement","notifier","addElement","script","document","createElement","type","src","onload","resolve","onerror","reject","body","appendChild","get","stripUrlProtocol","set","Promise","has","replace","Injectable","args","providedIn","LazyElementDirective","vcr","template","elementsLoaderService","ngOnInit","_this","elementTag","_def","element","nodes","name","loadingTemplateRef","createEmbeddedView","then","clear","catch","errorTemplateRef","console","error","Directive","selector","ViewContainerRef","TemplateRef","Input","LazyElementsModule","NgModule","declarations","imports","CommonModule","exports"],"mappings":"oaAIAA,EAAA,WAME,SAAAA,IAFAC,KAAAC,SAAuC,IAAIC,WAI3CH,EAAAI,UAAAC,YAAA,SACEC,EACAC,EACAC,GAEA,QAFA,IAAAA,IAAAA,GAAA,IAEKF,EACH,MAAM,IAAIG,MAASC,2CAAyBH,EAAG,eAGjD,IAAKA,EACH,MAAM,IAAIE,MACLC,2CAAyBJ,EAAG,kEAInC,IAAKL,KAAKU,WAAWL,GAAM,KACnBM,EAAWX,KAAKY,WAAWP,GAC3BQ,EAASC,SAASC,cAAc,UAClCR,IACFM,EAAOG,KAAO,UAEhBH,EAAOI,IAAMZ,EACbQ,EAAOK,OAASP,EAASQ,QACzBN,EAAOO,QAAUT,EAASU,OAC1BP,SAASQ,KAAKC,YAAYV,GAG5B,OAAOb,KAAKC,SAASuB,IAAIxB,KAAKyB,iBAAiBpB,KAGzCN,EAAAI,UAAAS,WAAR,SAAmBP,OACbM,EAKJ,OAJAX,KAAKC,SAASyB,IACZ1B,KAAKyB,iBAAiBpB,GACtB,IAAIsB,QAAO,SAAQR,EAASE,GAAW,OAACV,EAAW,CAAEQ,QAAOA,EAAEE,OAAMA,MAE/DV,GAGDZ,EAAAI,UAAAO,WAAR,SAAmBL,GACjB,OAAOL,KAAKC,SAAS2B,IAAI5B,KAAKyB,iBAAiBpB,KAGzCN,EAAAI,UAAAsB,iBAAR,SAAyBpB,GACvB,OAAOA,EAAIwB,QAAQ,cAAe,yBApDrCC,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,wJADd,GCQAC,EAAA,WASE,SAAAA,EACUC,EACAC,EACAC,GAFApC,KAAAkC,IAAAA,EACAlC,KAAAmC,SAAAA,EACAnC,KAAAoC,sBAAAA,EA4BZ,OAzBEH,EAAA9B,UAAAkC,SAAA,WAAA,IAAAC,EAAAtC,KACQuC,EAAcvC,KAAa,SAASwC,KAAKC,QAAQN,SAASO,MAAM,GACnED,QAAQE,KAEP3C,KAAK4C,oBACP5C,KAAKkC,IAAIW,mBAAmB7C,KAAK4C,oBAGnC5C,KAAKoC,sBACFhC,YAAYJ,KAAKK,IAAKkC,EAAYvC,KAAKO,UACvCuC,KAAI,WACHR,EAAKJ,IAAIa,QACTT,EAAKJ,IAAIW,mBAAmBP,EAAKH,YAElCa,SAAK,WACJV,EAAKJ,IAAIa,QACLT,EAAKW,iBACPX,EAAKJ,IAAIW,mBAAmBP,EAAKW,kBAEjCC,QAAQC,MACH1C,sDAAoC8B,EAAU,yNAnC5Da,EAAAA,UAASrB,KAAA,CAAC,CACTsB,SAAU,+DARVC,EAAAA,wBADAC,EAAAA,mBAIOxD,kCAQNyD,EAAAA,MAAKzB,KAAA,CAAC,6CACNyB,EAAAA,MAAKzB,KAAA,CAAC,0DACNyB,EAAAA,MAAKzB,KAAA,CAAC,gDACNyB,EAAAA,MAAKzB,KAAA,CAAC,0BAiCTE,EAxCA,GCZAwB,EAAA,WAKA,SAAAA,KAKiC,2BALhCC,EAAAA,SAAQ3B,KAAA,CAAC,CACR4B,aAAc,CAAC1B,GACf2B,QAAS,CAACC,EAAAA,cACVC,QAAS,CAAC7B,OAEqBwB,EAVjC","sourcesContent":["import { Injectable } from '@angular/core';\n\nconst LOG_PREFIX = '@angular-extensions/elements';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LazyElementsLoaderService {\n  registry: Map<string, Promise<void>> = new Map<string, Promise<void>>();\n\n  constructor() {}\n\n  loadElement(\n    url: string,\n    tag: string,\n    isModule: boolean = false\n  ): Promise<void> {\n    if (!url) {\n      throw new Error(`${LOG_PREFIX} - url for <${tag}> not found`);\n    }\n\n    if (!tag) {\n      throw new Error(\n        `${LOG_PREFIX} - tag for '${url}' not found, the *axLazyElement has to be used on HTML element`\n      );\n    }\n\n    if (!this.hasElement(url)) {\n      const notifier = this.addElement(url);\n      const script = document.createElement('script') as HTMLScriptElement;\n      if (isModule) {\n        script.type = 'module';\n      }\n      script.src = url;\n      script.onload = notifier.resolve;\n      script.onerror = notifier.reject;\n      document.body.appendChild(script);\n    }\n\n    return this.registry.get(this.stripUrlProtocol(url));\n  }\n\n  private addElement(url: string): Notifier {\n    let notifier: Notifier;\n    this.registry.set(\n      this.stripUrlProtocol(url),\n      new Promise<void>((resolve, reject) => (notifier = { resolve, reject }))\n    );\n    return notifier;\n  }\n\n  private hasElement(url: string): boolean {\n    return this.registry.has(this.stripUrlProtocol(url));\n  }\n\n  private stripUrlProtocol(url: string): string {\n    return url.replace(/https?:\\/\\//, '');\n  }\n}\n\ninterface Notifier {\n  resolve: () => void;\n  reject: (error: any) => void;\n}\n","import {\n  Directive,\n  Input,\n  OnInit,\n  TemplateRef,\n  ViewContainerRef\n} from '@angular/core';\n\nimport { LazyElementsLoaderService } from '../lazy-elements-loader.service';\n\nconst LOG_PREFIX = '@angular-extensions/elements';\n\n@Directive({\n  selector: '[axLazyElement]'\n})\nexport class LazyElementDirective implements OnInit {\n  @Input('axLazyElement') url: string;\n  @Input('axLazyElementLoadingTemplate') loadingTemplateRef: TemplateRef<any>; // tslint:disable-line:no-input-rename\n  @Input('axLazyElementErrorTemplate') errorTemplateRef: TemplateRef<any>; // tslint:disable-line:no-input-rename\n  @Input('axLazyElementModule') isModule: boolean; // tslint:disable-line:no-input-rename\n\n  constructor(\n    private vcr: ViewContainerRef,\n    private template: TemplateRef<any>,\n    private elementsLoaderService: LazyElementsLoaderService\n  ) {}\n\n  ngOnInit() {\n    const elementTag = (this.template as any)._def.element.template.nodes[0]\n      .element.name;\n\n    if (this.loadingTemplateRef) {\n      this.vcr.createEmbeddedView(this.loadingTemplateRef);\n    }\n\n    this.elementsLoaderService\n      .loadElement(this.url, elementTag, this.isModule)\n      .then(() => {\n        this.vcr.clear();\n        this.vcr.createEmbeddedView(this.template);\n      })\n      .catch(() => {\n        this.vcr.clear();\n        if (this.errorTemplateRef) {\n          this.vcr.createEmbeddedView(this.errorTemplateRef);\n        } else {\n          console.error(\n            `${LOG_PREFIX} - Loading of element <${elementTag}> failed, please provide <ng-template #error>Loading failed...</ng-template> and reference it in *axLazyElement=\"errorTemplate: error\" to display customized error message in place of element`\n          );\n        }\n      });\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { LazyElementDirective } from './lazy-element/lazy-element.directive';\n\n@NgModule({\n  declarations: [LazyElementDirective],\n  imports: [CommonModule],\n  exports: [LazyElementDirective]\n})\nexport class LazyElementsModule {}\n"]}