import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { map, shareReplay } from 'rxjs/operators';
import * as i0 from "@angular/core";
var Model = /** @class */ (function () {
    function Model(initialData, immutable, sharedSubscription, clone) {
        this._data = new BehaviorSubject(initialData);
        this.data$ = this._data.asObservable().pipe(map(function (data) {
            return immutable
                ? clone
                    ? clone(data)
                    : JSON.parse(JSON.stringify(data))
                : data;
        }), sharedSubscription ? shareReplay(1) : map(function (data) { return data; }));
    }
    Model.prototype.get = function () {
        return this._data.getValue();
    };
    Model.prototype.set = function (data) {
        this._data.next(data);
    };
    return Model;
}());
export { Model };
var ModelFactory = /** @class */ (function () {
    function ModelFactory() {
    }
    ModelFactory.prototype.create = function (initialData) {
        return new Model(initialData, true, false);
    };
    ModelFactory.prototype.createMutable = function (initialData) {
        return new Model(initialData, false, false);
    };
    ModelFactory.prototype.createMutableWithSharedSubscription = function (initialData) {
        return new Model(initialData, false, true);
    };
    ModelFactory.prototype.createWithCustomClone = function (initialData, clone) {
        return new Model(initialData, true, false, clone);
    };
    ModelFactory.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function ModelFactory_Factory() { return new ModelFactory(); }, token: ModelFactory, providedIn: "root" });
    ModelFactory = tslib_1.__decorate([
        Injectable({
            providedIn: 'root'
        })
    ], ModelFactory);
    return ModelFactory;
}());
export { ModelFactory };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kZWwuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYW5ndWxhci1leHRlbnNpb25zL21vZGVsLyIsInNvdXJjZXMiOlsibW9kZWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFjLGVBQWUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUNuRCxPQUFPLEVBQUUsR0FBRyxFQUFFLFdBQVcsRUFBRSxNQUFNLGdCQUFnQixDQUFDOztBQUVsRDtJQUtFLGVBQ0UsV0FBZ0IsRUFDaEIsU0FBa0IsRUFDbEIsa0JBQTJCLEVBQzNCLEtBQXNCO1FBRXRCLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxlQUFlLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDOUMsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFlBQVksRUFBRSxDQUFDLElBQUksQ0FDekMsR0FBRyxDQUFDLFVBQUMsSUFBTztZQUNWLE9BQUEsU0FBUztnQkFDUCxDQUFDLENBQUMsS0FBSztvQkFDTCxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQztvQkFDYixDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNwQyxDQUFDLENBQUMsSUFBSTtRQUpSLENBSVEsQ0FDVCxFQUNELGtCQUFrQixDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxVQUFDLElBQU8sSUFBSyxPQUFBLElBQUksRUFBSixDQUFJLENBQUMsQ0FDN0QsQ0FBQztJQUNKLENBQUM7SUFFRCxtQkFBRyxHQUFIO1FBQ0UsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQy9CLENBQUM7SUFFRCxtQkFBRyxHQUFILFVBQUksSUFBTztRQUNULElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3hCLENBQUM7SUFDSCxZQUFDO0FBQUQsQ0FBQyxBQS9CRCxJQStCQzs7QUFLRDtJQUFBO0tBZ0JDO0lBZkMsNkJBQU0sR0FBTixVQUFPLFdBQWM7UUFDbkIsT0FBTyxJQUFJLEtBQUssQ0FBSSxXQUFXLEVBQUUsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ2hELENBQUM7SUFFRCxvQ0FBYSxHQUFiLFVBQWMsV0FBYztRQUMxQixPQUFPLElBQUksS0FBSyxDQUFJLFdBQVcsRUFBRSxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDakQsQ0FBQztJQUVELDBEQUFtQyxHQUFuQyxVQUFvQyxXQUFjO1FBQ2hELE9BQU8sSUFBSSxLQUFLLENBQUksV0FBVyxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQztJQUNoRCxDQUFDO0lBRUQsNENBQXFCLEdBQXJCLFVBQXNCLFdBQWMsRUFBRSxLQUFxQjtRQUN6RCxPQUFPLElBQUksS0FBSyxDQUFJLFdBQVcsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ3ZELENBQUM7O0lBZlUsWUFBWTtRQUh4QixVQUFVLENBQUM7WUFDVixVQUFVLEVBQUUsTUFBTTtTQUNuQixDQUFDO09BQ1csWUFBWSxDQWdCeEI7dUJBeEREO0NBd0RDLEFBaEJELElBZ0JDO1NBaEJZLFlBQVkiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBCZWhhdmlvclN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IG1hcCwgc2hhcmVSZXBsYXkgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbmV4cG9ydCBjbGFzcyBNb2RlbDxUPiB7XG4gIHByaXZhdGUgX2RhdGE6IEJlaGF2aW9yU3ViamVjdDxUPjtcblxuICBkYXRhJDogT2JzZXJ2YWJsZTxUPjtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBpbml0aWFsRGF0YTogYW55LFxuICAgIGltbXV0YWJsZTogYm9vbGVhbixcbiAgICBzaGFyZWRTdWJzY3JpcHRpb246IGJvb2xlYW4sXG4gICAgY2xvbmU/OiAoZGF0YTogVCkgPT4gVFxuICApIHtcbiAgICB0aGlzLl9kYXRhID0gbmV3IEJlaGF2aW9yU3ViamVjdChpbml0aWFsRGF0YSk7XG4gICAgdGhpcy5kYXRhJCA9IHRoaXMuX2RhdGEuYXNPYnNlcnZhYmxlKCkucGlwZShcbiAgICAgIG1hcCgoZGF0YTogVCkgPT5cbiAgICAgICAgaW1tdXRhYmxlXG4gICAgICAgICAgPyBjbG9uZVxuICAgICAgICAgICAgPyBjbG9uZShkYXRhKVxuICAgICAgICAgICAgOiBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KGRhdGEpKVxuICAgICAgICAgIDogZGF0YVxuICAgICAgKSxcbiAgICAgIHNoYXJlZFN1YnNjcmlwdGlvbiA/IHNoYXJlUmVwbGF5KDEpIDogbWFwKChkYXRhOiBUKSA9PiBkYXRhKVxuICAgICk7XG4gIH1cblxuICBnZXQoKTogVCB7XG4gICAgcmV0dXJuIHRoaXMuX2RhdGEuZ2V0VmFsdWUoKTtcbiAgfVxuXG4gIHNldChkYXRhOiBUKSB7XG4gICAgdGhpcy5fZGF0YS5uZXh0KGRhdGEpO1xuICB9XG59XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIE1vZGVsRmFjdG9yeTxUPiB7XG4gIGNyZWF0ZShpbml0aWFsRGF0YTogVCk6IE1vZGVsPFQ+IHtcbiAgICByZXR1cm4gbmV3IE1vZGVsPFQ+KGluaXRpYWxEYXRhLCB0cnVlLCBmYWxzZSk7XG4gIH1cblxuICBjcmVhdGVNdXRhYmxlKGluaXRpYWxEYXRhOiBUKTogTW9kZWw8VD4ge1xuICAgIHJldHVybiBuZXcgTW9kZWw8VD4oaW5pdGlhbERhdGEsIGZhbHNlLCBmYWxzZSk7XG4gIH1cblxuICBjcmVhdGVNdXRhYmxlV2l0aFNoYXJlZFN1YnNjcmlwdGlvbihpbml0aWFsRGF0YTogVCk6IE1vZGVsPFQ+IHtcbiAgICByZXR1cm4gbmV3IE1vZGVsPFQ+KGluaXRpYWxEYXRhLCBmYWxzZSwgdHJ1ZSk7XG4gIH1cblxuICBjcmVhdGVXaXRoQ3VzdG9tQ2xvbmUoaW5pdGlhbERhdGE6IFQsIGNsb25lOiAoZGF0YTogVCkgPT4gVCkge1xuICAgIHJldHVybiBuZXcgTW9kZWw8VD4oaW5pdGlhbERhdGEsIHRydWUsIGZhbHNlLCBjbG9uZSk7XG4gIH1cbn1cbiJdfQ==