import { __decorate } from 'tslib';
import { ɵɵdefineInjectable, Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { map, shareReplay } from 'rxjs/operators';

var Model = /** @class */ (function () {
    function Model(initialData, immutable, sharedSubscription, clone) {
        this._data = new BehaviorSubject(initialData);
        this.data$ = this._data.asObservable().pipe(map(function (data) {
            return immutable
                ? clone
                    ? clone(data)
                    : JSON.parse(JSON.stringify(data))
                : data;
        }), sharedSubscription ? shareReplay(1) : map(function (data) { return data; }));
    }
    Model.prototype.get = function () {
        return this._data.getValue();
    };
    Model.prototype.set = function (data) {
        this._data.next(data);
    };
    return Model;
}());
var ModelFactory = /** @class */ (function () {
    function ModelFactory() {
    }
    ModelFactory.prototype.create = function (initialData) {
        return new Model(initialData, true, false);
    };
    ModelFactory.prototype.createMutable = function (initialData) {
        return new Model(initialData, false, false);
    };
    ModelFactory.prototype.createMutableWithSharedSubscription = function (initialData) {
        return new Model(initialData, false, true);
    };
    ModelFactory.prototype.createWithCustomClone = function (initialData, clone) {
        return new Model(initialData, true, false, clone);
    };
    ModelFactory.ngInjectableDef = ɵɵdefineInjectable({ factory: function ModelFactory_Factory() { return new ModelFactory(); }, token: ModelFactory, providedIn: "root" });
    ModelFactory = __decorate([
        Injectable({
            providedIn: 'root'
        })
    ], ModelFactory);
    return ModelFactory;
}());

/**
 * Generated bundle index. Do not edit.
 */

export { Model, ModelFactory };
//# sourceMappingURL=angular-extensions-model.js.map
