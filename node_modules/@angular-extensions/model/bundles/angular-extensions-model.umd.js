(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs'), require('rxjs/operators')) :
    typeof define === 'function' && define.amd ? define('@angular-extensions/model', ['exports', '@angular/core', 'rxjs', 'rxjs/operators'], factory) :
    (global = global || self, factory((global['angular-extensions'] = global['angular-extensions'] || {}, global['angular-extensions'].model = {}), global.ng.core, global.rxjs, global.rxjs.operators));
}(this, function (exports, core, rxjs, operators) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */

    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }

    var Model = /** @class */ (function () {
        function Model(initialData, immutable, sharedSubscription, clone) {
            this._data = new rxjs.BehaviorSubject(initialData);
            this.data$ = this._data.asObservable().pipe(operators.map(function (data) {
                return immutable
                    ? clone
                        ? clone(data)
                        : JSON.parse(JSON.stringify(data))
                    : data;
            }), sharedSubscription ? operators.shareReplay(1) : operators.map(function (data) { return data; }));
        }
        Model.prototype.get = function () {
            return this._data.getValue();
        };
        Model.prototype.set = function (data) {
            this._data.next(data);
        };
        return Model;
    }());
    var ModelFactory = /** @class */ (function () {
        function ModelFactory() {
        }
        ModelFactory.prototype.create = function (initialData) {
            return new Model(initialData, true, false);
        };
        ModelFactory.prototype.createMutable = function (initialData) {
            return new Model(initialData, false, false);
        };
        ModelFactory.prototype.createMutableWithSharedSubscription = function (initialData) {
            return new Model(initialData, false, true);
        };
        ModelFactory.prototype.createWithCustomClone = function (initialData, clone) {
            return new Model(initialData, true, false, clone);
        };
        ModelFactory.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function ModelFactory_Factory() { return new ModelFactory(); }, token: ModelFactory, providedIn: "root" });
        ModelFactory = __decorate([
            core.Injectable({
                providedIn: 'root'
            })
        ], ModelFactory);
        return ModelFactory;
    }());

    exports.Model = Model;
    exports.ModelFactory = ModelFactory;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=angular-extensions-model.umd.js.map
