import { __decorate } from 'tslib';
import { ɵɵdefineInjectable, Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { map, shareReplay } from 'rxjs/operators';

class Model {
    constructor(initialData, immutable, sharedSubscription, clone) {
        this._data = new BehaviorSubject(initialData);
        this.data$ = this._data.asObservable().pipe(map((data) => immutable
            ? clone
                ? clone(data)
                : JSON.parse(JSON.stringify(data))
            : data), sharedSubscription ? shareReplay(1) : map((data) => data));
    }
    get() {
        return this._data.getValue();
    }
    set(data) {
        this._data.next(data);
    }
}
let ModelFactory = class ModelFactory {
    create(initialData) {
        return new Model(initialData, true, false);
    }
    createMutable(initialData) {
        return new Model(initialData, false, false);
    }
    createMutableWithSharedSubscription(initialData) {
        return new Model(initialData, false, true);
    }
    createWithCustomClone(initialData, clone) {
        return new Model(initialData, true, false, clone);
    }
};
ModelFactory.ngInjectableDef = ɵɵdefineInjectable({ factory: function ModelFactory_Factory() { return new ModelFactory(); }, token: ModelFactory, providedIn: "root" });
ModelFactory = __decorate([
    Injectable({
        providedIn: 'root'
    })
], ModelFactory);

/**
 * Generated bundle index. Do not edit.
 */

export { Model, ModelFactory };
//# sourceMappingURL=angular-extensions-model.js.map
